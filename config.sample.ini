## TGTG Scanner Configuration
## --------------------------
## This is the configuration file for the TGTG Scanner.
## You can find more information about the configuration on the project page:
## https://github.com/Der-Henning/tgtg/wiki/Configuration

[MAIN]
## true for debug log messages
; Debug = true

## Time to wait till next scan in seconds - default 60 seconds
## The Scanner will randomize the wait time by +/- 10%
SleepTime = 60

## Optional Scheduler in cron schedule expression
## Example of cron schedule expression:
## ScheduleCron=* 12-14 * * 1-5     ## = allowed to run from 12:00 to 14:59 on monday to friday
## more help with formatting at https://crontab.guru/#*/1_12-14_*_*_1-5
## The Scanner will not make any requests to the TGTG API in the excluded periods
## Multiple cron example:
## ScheduleCron = * 18-21 * * 1-5; * 7-21 * * 6
ScheduleCron = * * * * *

## optional comma seperated list of item ids that should be scanned
; ItemIDs =

## Enable to export Metrics for prometheus
Metrics = false
MetricsPort = 8000

## Disable Test Notifications
; DisableTests = true

## Disable all console outputs. only displays errors or Console notifier messages
; Quiet = true

## Set localization for ${{pickupdate}}
Locale = en_US

## Disable to not show activity spinner in console
Activity = True

[TGTG]
## TGTG Username / Login EMail - mandatory
Username =
## Optionaly set tokens.
## They will be set automaticaly by the scanner after the login process
; AccessToken =
; RefreshToken =
; UserId =
; Datadome =

## Optional location settings for travel distance and time calculation using the Google Maps API.
## Calculations are made for driving, walking, biking and public transport.
## API Key and Address are mandatory for this feature
## Generate an API Key: https://developers.google.com/maps/documentation/javascript/get-api-key
## Address can be any address that can be found by Google Maps e.g. Strobelallee 50, 44139 Dortmund, Germany
## Calculations are made only with cached values once the cache is filled.
## Distance and time to the item location is cached when the avaiable item amount rises from 0 to something else.
## API requests are only made when the feature is Enabled and the cache is empty.
## Requests are only made for the modes of transportation used by the notifiers.
## Distance and time do not consider traffic and use the 'best' route according to Google Maps.
## Attributes to use in notifiers: walking_dt, driving_dt, biking_dt, transit_dt
[LOCATION]
Enabled = False
GoogleMapsAPIKey =
OriginAddress =

#### Notifiers
## To enable notifier fill in the needed settings
## and set Enabled to true

## Apprise allows you to send a notification to almost all of the most popular notification services
## Apprise URL example: twilio://AccountSid:AuthToken@FromPhoneNo/ToPhoneNo
## See the list of supported services: https://github.com/caronc/apprise/wiki
## Default Title (optional):
## 'New Magic Bags'
## Default Body:
## '${{display_name}} - new amount: ${{items_available}} - https://share.toogoodtogo.com/item/${{item_id}}'
[Apprise]
Enabled = false
URL =
; Cron =
; Title =
; Body =

[CONSOLE]
## Simple notifier for the console output
## Message can be modified with the body property
## The body can use variables as described below
Enabled = false
; Body =
; Cron =

[SMTP]
## SMTP Settings / Example for gmail
## Subject and Body options are optional.
## Subject and Body options can use variables as described below
## The Body option is interpreted as HTML
Enabled = false
Host = smtp.gmail.com
Port = 587
Username = max.mustermann@gmail.com
Password =
TLS = true
SSL = false
Sender = max.mustermann@gmail.com
Recipients = max.mustermann@gmail.com
; Cron =
; Subject =
; Body =

[PUSHSAFER]
Enabled = false
Key =
DeviceID =
; Cron =

## The IFTTT Body contains a json string which can use the variables described below for the webhook
## Default Body:
## {"value1": "${{display_name}}", "value2": ${{items_available}}, "value3": "https://share.toogoodtogo.com/item/${{item_id}}"}
[IFTTT]
Enabled = false
Event =
Key =
; Body =
; cron =

## To use ntfy you have to create a topic on your favorite server.
## Default Body:
## ${{display_name}} - New Amount: ${{items_available}} - https://share.toogoodtogo.com/item/${{item_id}}
## You can use variables on body, title, tags and click
[NTFY]
Enabled = false
Server = https://ntfy.sh
Topic =
; Title = tgtg
; Body =
; Priority = default
; Tags = tgtg
; Click = https://share.toogoodtogo.com/item/${{item_id}}
; Username =
; Password =
; Timeout = 60
; Cron =

## To use Telegram notifications you have to create a bot using the @botfather
## If you only provide the token of the bot will use the last chat it reseived a message on
## You can add multiple chat ids as a comma seperated list
## The message body is optional and is interpreted as markdown text
## You can use the same variables as described for the Webhook notifier below
## Example:
## *${{display_name}}*\n*Available*: ${{items_available}}\n*Rating*: ${{rating}}\n*Price*: ${{price}} ${{currency}}\n*Pickup*: ${{pickupdate}}\n*Link*: https://share.toogoodtogo.com/item/${{item_id}}
[TELEGRAM]
Enabled = false
Token =
ChatIDs =
; Timeout = 60
; Cron =
; Body =

## WebHook URL and body can contain variables in the form of ${{variable}}
## Available variables: item_id, items_available, display_name, price, currency, pickupdate, description, favorite, rating, scanned_on
## json body example: {"value1": "${{display_name}}", "value2": ${{items_available}}}
## You have to provide "" for strings if needed
[WEBHOOK]
Enabled = false
URL =
; Method = POST
; Body =
; Type = text/plain
; Headers =
; Username =
; Password =
; Timeout = 60
; Cron =

[SCRIPT]
## To run a script file
## Please make sure script file has execute rights
## Command example: /home/user/tgtg/script.sh -n ${{display_name}} -a ${{items_available}}
Enabled = false
Command =
; Cron =
