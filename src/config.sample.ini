[MAIN]
## true for debug log messages
; Debug = true

## Time to wait till next scan in seconds - default 60 seconds
## The Scanner will randomize the wait time by +/- 10%
SleepTime = 60

## Optional Scheduler in cron schedule expression
## Example of cron schedule expression:
## ScheduleCron=* 12-14 * * 1-5     ## = allowed to run from 12:00 to 14:59 on monday to friday
## more help with formatting at https://crontab.guru/#*/1_12-14_*_*_1-5
## The Scanner will not make any requests to the TGTG API in the excluded periods
ScheduleCron = * * * * *

## optional comma seperated list of item ids that should be scanned
; ItemIDs =

## Enable to export Metrics for prometheus
Metrics = false
MetricsPort = 8000

## Disable Test Notifications
; DisableTests = true

## Disable all console outputs. only displays errors or Console notifier messages
; quiet = true

## Set localization for ${{pickupdate}}
locale = en_US

[TGTG]
## TGTG Username / Login EMail - mandatory
Username =
## Optionaly set tokens.
## They will be set automaticaly by the scanner after the login process
; AccessToken =
; RefreshToken =
; UserId =
; Datadome =

#### Notifiers
## To enable notifier fill in the needed settings
## and set enabled to true

## Apprise allows you to send a notification to almost all of the most popular notification services
## Apprise URL example: twilio://AccountSid:AuthToken@FromPhoneNo/ToPhoneNo
## See the list of supported services: https://github.com/caronc/apprise/wiki
## Default Title (optional):
## 'New Magic Bags'
## Default Body:
## '${{display_name}} - new amount: ${{items_available}} - https://share.toogoodtogo.com/item/${{item_id}}'
[Apprise]
enabled = false
URL =
; cron =
; Title =
; Body =

[CONSOLE]
## Simple notifier for the console output
## Message can be modified with the body property
## The body can use variables as described below
enabled = false
; body =
; cron =

[SMTP]
## SMTP Settings / Example for gmail
## Subject and Body options are optional.
## Subject and Body options can use variables as described below
## The Body option is interpreted as HTML
enabled = false
Host = smtp.gmail.com
Port = 587
Username = max.mustermann@gmail.com
Password =
TLS = true
SSL = false
Sender = max.mustermann@gmail.com
Recipient = max.mustermann@gmail.com
; cron =
; Subject =
; Body =

[PUSHSAFER]
enabled = false
Key =
DeviceID =
; cron =

## The IFTTT Body contains a json string which can use the variables described below for the webhook
## Default Body:
## {"value1": "${{display_name}}", "value2": ${{items_available}}, "value3": "https://share.toogoodtogo.com/item/${{item_id}}"}
[IFTTT]
enabled = false
Event =
Key =
; Body =
; cron =

## To use ntfy you have to create a topic on your favorite server.
## Default Body:
## ${{display_name}} - New Amount: ${{items_available}} - https://share.toogoodtogo.com/item/${{item_id}}
[NTFY]
enabled = false
server=https://ntfy.sh
topic=
;title=tgtg
;body=
;priority=default
;tags=tgtg
;username=
;password=
;timeout=60
;cron=

## To use Telegram notifications you have to create a bot using the @botfather
## If you only provide the token of the bot will use the last chat it reseived a message on
## You can add multiple chat ids as a comma seperated list
## The message body is optional and is interpreted as markdown text
## You can use the same variables as described for the Webhook notifier below
## Example:
## *${{display_name}}*\n*Available*: ${{items_available}}\n*Rating*: ${{rating}}\n*Price*: ${{price}} ${{currency}}\n*Pickup*: ${{pickupdate}}\n*Link*: https://share.toogoodtogo.com/item/${{item_id}}
[TELEGRAM]
enabled = false
token =
chat_ids =
; timeout = 60
; cron =
; body =

## WebHook URL and body can contain variables in the form of ${{variable}}
## Available variables: item_id, items_available, display_name, price, currency, pickupdate, description, favorite, rating, scanned_on
## json body example: {"value1": "${{display_name}}", "value2": ${{items_available}}}
## You have to provide "" for strings if needed
[WEBHOOK]
enabled = false
URL =
; Method = POST
; body =
; type = text/plain
; headers =
; username =
; password =
; timeout = 60
; cron =
