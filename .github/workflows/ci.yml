name: CI

on:
    push:
        branches:
            - main
            - dev
        tags:
            - v*
    pull_request:
        branches:
            - main
    schedule:
        - cron: "0 1 * * *"

jobs:
    code-ql:
        name: CodeQL
        runs-on: ubuntu-latest
        if: github.actor != 'dependabot[bot]'
        permissions:
            actions: read
            contents: read
            security-events: write
        steps:
            -   uses: actions/checkout@v3
            -   uses: github/codeql-action/init@v2
                with:
                    languages: 'python'
            -   uses: github/codeql-action/analyze@v2
    prep-tests:
        name: Prepare Tests
        runs-on: ubuntu-latest
        if: github.actor != 'dependabot[bot]'
        outputs:
            matrix: ${{ steps.set-matrix.outputs.matrix }}
        steps:
            -   uses: actions/checkout@v3
            -   uses: actions/setup-python@v4
                with:
                    python-version: 3.9
            -   name: Install dependencies
                run: pip install -r requirements.txt
            -   name: Login
                run: |
                    python ./src/login.py
                    echo "::add-mask::${{ env.TGTG_ACCESS_TOKEN }}"
                    echo "::add-mask::${{ env.TGTG_REFRESH_TOKEN }}"
                    echo "::add-mask::${{ env.TGTG_USER_ID }}"
                    echo "TGTG_ACCESS_TOKEN=${{ env.TGTG_ACCESS_TOKEN }}" >> $GITHUB_ENV
                    echo "TGTG_REFRESH_TOKEN=${{ env.TGTG_REFRESH_TOKEN }}" >> $GITHUB_ENV
                    echo "TGTG_USER_ID=${{ env.TGTG_USER_ID }}" >> $GITHUB_ENV
                env:
                    TGTG_USERNAME: ${{ secrets.TGTG_USERNAME }}
                    TGTG_ACCESS_TOKEN: ${{ secrets.TGTG_ACCESS_TOKEN }}
                    TGTG_REFRESH_TOKEN: ${{ secrets.TGTG_REFRESH_TOKEN }}
                    TGTG_USER_ID: ${{ secrets.TGTG_USER_ID }}
            -   uses: hmanzur/actions-set-secret@v2.0.0
                with:
                    name: 'TGTG_ACCESS_TOKEN'
                    value: ${{ env.TGTG_ACCESS_TOKEN }}
                    repository: Der-Henning/tgtg
                    token: ${{ secrets.REPO_ACCESS_TOKEN }}
            -   uses: hmanzur/actions-set-secret@v2.0.0
                with:
                    name: 'TGTG_REFRESH_TOKEN'
                    value: ${{ env.TGTG_REFRESH_TOKEN }}
                    repository: Der-Henning/tgtg
                    token: ${{ secrets.REPO_ACCESS_TOKEN }}
            -   uses: hmanzur/actions-set-secret@v2.0.0
                with:
                    name: 'TGTG_USER_ID'
                    value: ${{ env.TGTG_USER_ID }}
                    repository: Der-Henning/tgtg
                    token: ${{ secrets.REPO_ACCESS_TOKEN }}
            -   name: Create Test Matrix
                id: set-matrix
                run: |
                    if [[ "${{ github.event_name }}" = "schedule" ]]
                    then echo ::set-output name=matrix::[\"ubuntu-latest\"]
                    else echo ::set-output name=matrix::[\"ubuntu-latest\",\"windows-latest\",\"macos-latest\"]
                    fi
    test-dependencies:
        name: Test Dependencies
        runs-on: ubuntu-latest
        if: github.actor == 'dependabot[bot]'
        steps:
            -   uses: actions/checkout@v3
            -   uses: actions/setup-python@v4
                with:
                    python-version: 3.9
            -   name: Install dependencies
                run: pip install -r requirements.txt
    tests:
        name: Run Tests
        runs-on: ${{ matrix.os }}
        needs: prep-tests
        strategy:
            fail-fast: false
            max-parallel: 1
            matrix:
                python: [ '3.9' ]
                os: ${{fromJson(needs.prep-tests.outputs.matrix)}}
        steps:
            -   uses: actions/checkout@v3
            -   uses: actions/setup-python@v4
                with:
                    python-version: ${{ matrix.python }}
            -   name: Install dependencies
                run: pip install -r requirements.txt
            -   name: Run tests
                run: python -m unittest discover -v -s ./src
                env:
                    TGTG_USERNAME: ${{ secrets.TGTG_USERNAME }}
                    TGTG_ACCESS_TOKEN: ${{ secrets.TGTG_ACCESS_TOKEN }}
                    TGTG_REFRESH_TOKEN: ${{ secrets.TGTG_REFRESH_TOKEN }}
                    TGTG_USER_ID: ${{ secrets.TGTG_USER_ID }}
    docker-images:
        name: Build Docker Images
        runs-on: ubuntu-latest
        needs: tests
        if: github.event_name == 'push' && (github.ref_name == 'main' || github.ref_type == 'tag')
        strategy:
            matrix:
                include:
                    -   base: slim
                        tag: ''
                        file: ./Dockerfile
                        context: ./
                    -   base: alpine
                        tag: -alpine
                        file: ./Dockerfile.alpine
                        context: ./
        steps:
        -   uses: actions/checkout@v3
        -   uses: docker/metadata-action@v4
            id: meta
            with:
                images: ${{ secrets.DOCKER_USERNAME }}/tgtg
                flavor: |
                    suffix=${{ matrix.tag }},onlatest=true
                tags: |
                    type=edge,branch=main,suffix=${{ matrix.tag }}
                    type=semver,pattern=v{{version}}
                    type=semver,pattern=v{{major}}.{{minor}}
                    type=semver,pattern=v{{major}}
        -   uses: docker/login-action@v2
            with:
                username: ${{ secrets.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKER_PASSWORD }}
        -   uses: docker/setup-qemu-action@v2
        -   uses: docker/setup-buildx-action@v2
            id: buildx
        -   uses: docker/build-push-action@v3
            with:
                context: ${{ matrix.context }}
                file: ${{ matrix.file }}
                platforms: linux/arm64, linux/amd64, linux/arm/v7, linux/386, linux/arm/v6
                push: true
                tags: ${{ steps.meta.outputs.tags }}
                labels: ${{ steps.meta.outputs.labels }}
    releases:
        name: Build Release Files
        runs-on: ${{ matrix.os }}
        needs: tests
        if: github.event_name == 'push' && (github.ref_name == 'main' || github.ref_type == 'tag')
        strategy:
            matrix:
                include:
                    -   os: ubuntu-latest
                        tag: linux
                    -   os: windows-latest
                        tag: win
                    -   os: macos-latest
                        tag: macos
        steps:
        -   uses: actions/checkout@v3
        -   uses: actions/setup-python@v4
            with:
                python-version: 3.9
        -   name: Install dependencies
            run: pip install -r requirements.dev.txt
        -   name: Run PyInstaller
            run: |
                pyinstaller scanner.spec
                cp ./src/config.sample.ini ./dist/config.ini
        -   name: Make filename
            id: filename
            run: echo "::set-output name=filename::scanner-${{ github.ref_name }}-${{ matrix.tag }}.zip"
        -   name: Zip files
            if: matrix.tag == 'linux' || matrix.tag == 'macos'
            run: zip -j ./${{ steps.filename.outputs.filename }} ./dist/*
        -   name: Zip files
            if: matrix.tag == 'win'
            run: Compress-Archive ./dist/* ./${{ steps.filename.outputs.filename }}
        -   uses: actions/upload-artifact@v3
            with: 
                name: releases
                path: ./${{ steps.filename.outputs.filename }}
        -   uses: bruceadams/get-release@v1.2.3
            if: github.ref_type == 'tag'
            id: get_release
            env:
                GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
        -   uses: actions/upload-release-asset@v1
            if: github.ref_type == 'tag'
            env:
                GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
            with:
                upload_url: ${{ steps.get_release.outputs.upload_url }}
                asset_path: ./${{ steps.filename.outputs.filename }}
                asset_name: ${{ steps.filename.outputs.filename }}
                asset_content_type: application/zip